//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace twMVC.Repositories.EF
{
    public partial class Products
    {
        #region Primitive Properties
    
        public virtual int ProductID
        {
            get;
            set;
        }
    
        public virtual string ProductName
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SupplierID
        {
            get { return _supplierID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_supplierID != value)
                    {
                        if (Suppliers != null && Suppliers.SupplierID != value)
                        {
                            Suppliers = null;
                        }
                        _supplierID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _supplierID;
    
        public virtual Nullable<int> CategoryID
        {
            get { return _categoryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_categoryID != value)
                    {
                        if (Categories != null && Categories.CategoryID != value)
                        {
                            Categories = null;
                        }
                        _categoryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _categoryID;
    
        public virtual string QuantityPerUnit
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> UnitPrice
        {
            get;
            set;
        }
    
        public virtual Nullable<short> UnitsInStock
        {
            get;
            set;
        }
    
        public virtual Nullable<short> UnitsOnOrder
        {
            get;
            set;
        }
    
        public virtual Nullable<short> ReorderLevel
        {
            get;
            set;
        }
    
        public virtual bool Discontinued
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Categories Categories
        {
            get { return _categories; }
            set
            {
                if (!ReferenceEquals(_categories, value))
                {
                    var previousValue = _categories;
                    _categories = value;
                    FixupCategories(previousValue);
                }
            }
        }
        private Categories _categories;
    
        public virtual ICollection<Order_Details> Order_Details
        {
            get
            {
                if (_order_Details == null)
                {
                    var newCollection = new FixupCollection<Order_Details>();
                    newCollection.CollectionChanged += FixupOrder_Details;
                    _order_Details = newCollection;
                }
                return _order_Details;
            }
            set
            {
                if (!ReferenceEquals(_order_Details, value))
                {
                    var previousValue = _order_Details as FixupCollection<Order_Details>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrder_Details;
                    }
                    _order_Details = value;
                    var newValue = value as FixupCollection<Order_Details>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrder_Details;
                    }
                }
            }
        }
        private ICollection<Order_Details> _order_Details;
    
        public virtual Suppliers Suppliers
        {
            get { return _suppliers; }
            set
            {
                if (!ReferenceEquals(_suppliers, value))
                {
                    var previousValue = _suppliers;
                    _suppliers = value;
                    FixupSuppliers(previousValue);
                }
            }
        }
        private Suppliers _suppliers;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCategories(Categories previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Categories != null)
            {
                if (!Categories.Products.Contains(this))
                {
                    Categories.Products.Add(this);
                }
                if (CategoryID != Categories.CategoryID)
                {
                    CategoryID = Categories.CategoryID;
                }
            }
            else if (!_settingFK)
            {
                CategoryID = null;
            }
        }
    
        private void FixupSuppliers(Suppliers previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Suppliers != null)
            {
                if (!Suppliers.Products.Contains(this))
                {
                    Suppliers.Products.Add(this);
                }
                if (SupplierID != Suppliers.SupplierID)
                {
                    SupplierID = Suppliers.SupplierID;
                }
            }
            else if (!_settingFK)
            {
                SupplierID = null;
            }
        }
    
        private void FixupOrder_Details(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order_Details item in e.NewItems)
                {
                    item.Products = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order_Details item in e.OldItems)
                {
                    if (ReferenceEquals(item.Products, this))
                    {
                        item.Products = null;
                    }
                }
            }
        }

        #endregion

    }
}
