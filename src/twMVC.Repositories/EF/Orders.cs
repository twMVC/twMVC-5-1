//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace twMVC.Repositories.EF
{
    public partial class Orders
    {
        #region Primitive Properties
    
        public virtual int OrderID
        {
            get;
            set;
        }
    
        public virtual string CustomerID
        {
            get { return _customerID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerID != value)
                    {
                        if (Customers != null && Customers.CustomerID != value)
                        {
                            Customers = null;
                        }
                        _customerID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _customerID;
    
        public virtual Nullable<int> EmployeeID
        {
            get { return _employeeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_employeeID != value)
                    {
                        if (Employees != null && Employees.EmployeeID != value)
                        {
                            Employees = null;
                        }
                        _employeeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _employeeID;
    
        public virtual Nullable<System.DateTime> OrderDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> RequiredDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ShippedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ShipVia
        {
            get { return _shipVia; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_shipVia != value)
                    {
                        if (Shippers != null && Shippers.ShipperID != value)
                        {
                            Shippers = null;
                        }
                        _shipVia = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _shipVia;
    
        public virtual Nullable<decimal> Freight
        {
            get;
            set;
        }
    
        public virtual string ShipName
        {
            get;
            set;
        }
    
        public virtual string ShipAddress
        {
            get;
            set;
        }
    
        public virtual string ShipCity
        {
            get;
            set;
        }
    
        public virtual string ShipRegion
        {
            get;
            set;
        }
    
        public virtual string ShipPostalCode
        {
            get;
            set;
        }
    
        public virtual string ShipCountry
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Customers Customers
        {
            get { return _customers; }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers;
                    _customers = value;
                    FixupCustomers(previousValue);
                }
            }
        }
        private Customers _customers;
    
        public virtual Employees Employees
        {
            get { return _employees; }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees;
                    _employees = value;
                    FixupEmployees(previousValue);
                }
            }
        }
        private Employees _employees;
    
        public virtual ICollection<Order_Details> Order_Details
        {
            get
            {
                if (_order_Details == null)
                {
                    var newCollection = new FixupCollection<Order_Details>();
                    newCollection.CollectionChanged += FixupOrder_Details;
                    _order_Details = newCollection;
                }
                return _order_Details;
            }
            set
            {
                if (!ReferenceEquals(_order_Details, value))
                {
                    var previousValue = _order_Details as FixupCollection<Order_Details>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrder_Details;
                    }
                    _order_Details = value;
                    var newValue = value as FixupCollection<Order_Details>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrder_Details;
                    }
                }
            }
        }
        private ICollection<Order_Details> _order_Details;
    
        public virtual Shippers Shippers
        {
            get { return _shippers; }
            set
            {
                if (!ReferenceEquals(_shippers, value))
                {
                    var previousValue = _shippers;
                    _shippers = value;
                    FixupShippers(previousValue);
                }
            }
        }
        private Shippers _shippers;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomers(Customers previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Customers != null)
            {
                if (!Customers.Orders.Contains(this))
                {
                    Customers.Orders.Add(this);
                }
                if (CustomerID != Customers.CustomerID)
                {
                    CustomerID = Customers.CustomerID;
                }
            }
            else if (!_settingFK)
            {
                CustomerID = null;
            }
        }
    
        private void FixupEmployees(Employees previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Employees != null)
            {
                if (!Employees.Orders.Contains(this))
                {
                    Employees.Orders.Add(this);
                }
                if (EmployeeID != Employees.EmployeeID)
                {
                    EmployeeID = Employees.EmployeeID;
                }
            }
            else if (!_settingFK)
            {
                EmployeeID = null;
            }
        }
    
        private void FixupShippers(Shippers previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Shippers != null)
            {
                if (!Shippers.Orders.Contains(this))
                {
                    Shippers.Orders.Add(this);
                }
                if (ShipVia != Shippers.ShipperID)
                {
                    ShipVia = Shippers.ShipperID;
                }
            }
            else if (!_settingFK)
            {
                ShipVia = null;
            }
        }
    
        private void FixupOrder_Details(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order_Details item in e.NewItems)
                {
                    item.Orders = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order_Details item in e.OldItems)
                {
                    if (ReferenceEquals(item.Orders, this))
                    {
                        item.Orders = null;
                    }
                }
            }
        }

        #endregion

    }
}
